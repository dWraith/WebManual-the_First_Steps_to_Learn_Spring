<div class="title">Работа с MySQL (вывод данных из базы данных)
</div>
<div class="text">Для понимания этой главы от вас требуются крепкие знания языка SQL и принципов работы баз данных. Для
начала создаем базу данных и таблицу. Входим в командную строку MySQL, и выполняем команды:</div>
<div class="syntax">
mysql &#62; CREATE DATABASE mydb;
<br>mysql&#62; CREATE TABLE employees
<br>( id tinyint(4) DEFAULT '0' NOT NULL AUTO_INCREMENT,
<br>first varchar(20), last varchar(20), address varchar(255),
<br>position varchar(50), PRIMARY KEY (id), UNIQUE id (id));
<br>INSERT INTO employees VALUES
<br>(1,'Bob','Smith','128 Here St, Cityname','Marketing Manager');
<br>INSERT INTO employees VALUES
<br>(2,'John','Roberts','45 There St ,Townville','Telephonist');
<br>INSERT INTO employees VALUES
<br>(3,'Brad','Johnson','1/34 Nowhere Blvd, Snowston','Doorman');
</div>
<div class="text">В результате у нас будет создана база данных mydb. В ней будет создана таблица employees (работники). И в
эту таблицу будут вставлены три записи с данными о работниках. Для экспериментов с PHP и MySQL этого
вполне достаточно.
Давайте выведем эти данные из базы данных в HTML-страницу. Для общения с MySQL из PHP понадобятся
следующие функции.</div>
<div class="syntax">
<b>int mysql_connect(string hostname, string username, string password);</b>
<br>Создать соединение с MySQL.
<br><b>Параметры:</b>
<br>Hostname – имя хоста, на котором находится база данных.
</div>
<div class="syntax">
Username – имя пользователя.
<br>Password – пароль пользователя.
<br>Функция возвращает параметр типа int, который больше 0, если соединение прошло успешно, и равен 0
<br>в противном случае.
</div>
<div class="syntax">
<b>int mysql_select_db(string database_name, int link_identifier);</b>
<br>Выбрать базу данных для работы.
<br><b>Параметры:</b>
<br>Database_name – имя базы данных.
<br>link_identifier – ID соединения, которое получено в функции mysql_connect. (параметр необязательный,
<br>если он не указывается, то используется ID от последнего вызова mysql_connect)
<br>Функция возвращает значение true или false
</div>
<div class="syntax">
<b>int mysql_query(string query, int link_identifier);</b>
<br>Функция выполняет запрос к базе данных.
<br><b>Параметры:</b>
<br>query – строка, содержащая запрос
<br>link_identifier – см. предыдущую функцию.
<br>Функция возвращает ID результата или 0, если произошла ошибка.
</div>
<div class="syntax">
<b>int mysql_result(int result, int i, column);</b>
<br>Функция возвращает значение поля в столбце column и в строке i.
</div>
<div class="syntax">
<b>int mysql_close(int link_identifier);</b>
<br>Функция закрывает соединение с MySQL.
<br><b>Параметры:</b>
<br>link_identifier – см. выше.
<br>Функция возвращает значение true или false
</div>
<div class="text">Создайте файл с расширением .php3 и наберите в нем следующий текст:</div>
<div class="syntax">
&#60;html&#62;
<br>&#60;body&#62;
<br>&#60;?php
<br>$db = mysql_connect("localhost", "root");
<br>mysql_select_db("mydb",$db);
<br>$result = mysql_query("SELECT * FROM employees",$db);
<br>printf("First Name: %s&#60;br&#62;\n", mysql_result($result,0,"first"));
<br>printf("Last Name: %s&#60;br&#62;\n", mysql_result($result,0,"last"));
<br>printf("Address: %s&#60;br&#62;\n", mysql_result($result,0,"address"));
<br>printf("Position: %s&#60;br&#62;\n", mysql_result($result,0,"position"));
<br>mysql_close($db);
<br>?&#62;
<br>&#60;/body&#62;
<br>&#60;/html&#62;
</div>
<div class="text">
<br>Теперь рассмотрим построчно, что происходит в этой программе. Функция <b>mysql_connect()</b> открывает связь с
сервером баз данных MySQL. В качестве параметров мы указываем ей имя узла (localhost), на котором
находится база данных, имя пользователя (root), под которым мы будем с ней работать, и пароль (в данном
случае он пустой и потому не указывается).
Имя узла localhost означает, что сервер MySQL находится на той же машине, что и сам Web-сервер с PHP-
движком. В принципе ничто не мешает вам (имея права) обратиться к серверу MySQL, который находится на
соседней машине или вообще на другом конце земного шара. Такие эксперименты авторы данной книги уже
проводили и весьма успешно. О способах построения приложений с использованием нескольких машин мы
поговорим немного позже.
В результате выполнения этой функции получаем некое значение, которое присваиваем переменной $db. Эта
переменная называется идентификатором соединения (см. выше описание синтаксиса).
Соединившись с сервером выбираем базу данных, с которой будем работать (ведь на одном и том же сервере
могут "крутиться" несколько баз данных). Это делается с помощью функции <b>mysql_select_db().</b> В качестве
параметров мы передаем название нужной нам базы данных и идентификатор соединения, полученный нами
при выполнении предыдущей команды.
В результате выполнения функции <b>mysql_select_db()</b> мы получаем значение true или false. Если соединение с
базой данных произошло успешно – true, если нет – false. Для того, чтобы наша программа-страница работала
более интеллектуально, мы можем при желании проанализировать возвращаемое значение и если оно будет
false, вывести хорошее информативное сообщение об ошибке. Как это делается, мы рассмотрим в других, более
сложных примерах.
И наконец мы обращаемся к базе данных с запросом, написанным на языке SQL. Для этого служит функция
<b>mysql_query().</b> В качестве первого параметра мы передаем текст запроса, а в качестве второго – "скармливаем"
идентификатор, полученный от выполнения функции <b>mysql_connect().</b>
Результаты выполнения функции <b>mysql_query()</b> – записи, удовлетворяющие нашему запросу - помещаем в
переменную $result.
И наконец, с помощью функции mysql_result() извлекаем из результатов выполнения нашего запроса (т.е.
переменной $result), первый ряд-запись (который имеет порядковый номер 0), и значение определенного поля
(по его имени). Перебирая друг за другом записи от 0 до 2, мы выберем все записи, что хранятся в нашей
маленькой базе данных.
Привести иллюстрацию исполнения данного кода
В данном коде в полной мере используется функция <b>printf()</b>, с которой мы знакомились в предыдущей главе.
Для тех, кто когда-либо работал с языком Perl или C, строки с функцией printf покажутся весьма знакомыми.
Если говорить коротко, то в каждой приведенной выше строке комбинация символов "%s" обозначает, что
вместо нее должна быть поставлена переменная, идущая во второй части выражения printf. Причем эта
переменная должна быть переведена в тип "строковая переменная". Более подробное описание синтаксиса
функции printf() читайте в руководстве по языку.
Вот так легко можно работать с базой данных в PHP.
В следующей главе мы познакомимся с более интеллектуальными, чем <b>mysql_result()</b>, функциями выборки
данных из БД <b>mysql_fetch_row()</b> и <b>mysql_fetch_array()</b>, В дальнейшем мы рекомендуем пользоваться именно
ими, как более быстрыми и удобными, чем <b>mysql_result().</b>
</div>